Section 1: Time-based Analysis
Query 1: Monthly Sales Trends
SELECT 
    strftime('%Y-%m', date) AS month,
    SUM(total_amount) AS total_sales,
    COUNT(DISTINCT transaction_id) AS total_transactions,
    SUM(quantity) AS total_units_sold
FROM sales_data
GROUP BY month
ORDER BY month;


Query 2: Best and Worst Performing Months
SELECT 
    strftime('%Y-%m', date) AS best_months,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY best_months
ORDER BY total_sales DESC
LIMIT 5;

SELECT 
    strftime('%Y-%m', date) AS worst_months,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY worst_months
ORDER BY total_sales ASC
LIMIT 5;    


Query 3: Yearly Growth in Total Sales
WITH yearly_sales AS (
    SELECT 
        strftime('%Y', date) AS year,
        SUM(total_amount) AS total_sales
    FROM sales_data
    GROUP BY year
)
SELECT 
    year,
    total_sales,
    CASE 
        WHEN year = '2023' THEN NULL  -- No growth for the first year
        WHEN year = '2024' THEN ROUND((total_sales - 16320) / 16320.0 * 100, 2)  -- Growth from 2023
        WHEN year = '2025' THEN ROUND((total_sales - 173830) / 173830.0 * 100, 2)  -- Growth from 2024
        WHEN year = '2026' THEN ROUND((total_sales - 182975) / 182975.0 * 100, 2)  -- Growth from 2025
    END AS percentage_growth
FROM yearly_sales
ORDER BY year;


Query 4: Average Sales by Calendar Month (Seasonality)
SELECT 
    strftime('%m', date) AS month,
    ROUND(AVG(total_amount), 2) AS avg_sales
FROM sales_data
GROUP BY month
ORDER BY month;


Query 5: Average Monthly Sales + YoY% Based on Averages
WITH monthly_sales AS (
    SELECT 
        strftime('%Y', date) AS year,
        strftime('%m', date) AS month,
        SUM(total_amount) AS total_sales
    FROM sales_data
    GROUP BY year, month
),
avg_monthly_sales AS (
    SELECT 
        year,
        ROUND(AVG(total_sales), 2) AS avg_monthly_sales
    FROM monthly_sales
    GROUP BY year
)
SELECT 
    year,
    avg_monthly_sales,
    ROUND(
        (avg_monthly_sales - LAG(avg_monthly_sales) OVER (ORDER BY year)) 
        / LAG(avg_monthly_sales) OVER (ORDER BY year) * 100, 2
    ) AS yoy_growth_percent
FROM avg_monthly_sales;





Product Performance Analysis
Query 6: Top-Selling Product Categories
SELECT 
    product_category,
    SUM(total_amount) AS total_revenue
FROM sales_data
GROUP BY product_category
ORDER BY total_revenue DESC;


Query 7: Most Frequently Purchased Product Categories
SELECT 
    product_category,
    SUM(quantity) AS total_quantity_sold
FROM sales_data
GROUP BY product_category
ORDER BY total_quantity_sold DESC;


Query 8: Average Revenue per Transaction by Product Category
SELECT 
    product_category,
    ROUND(AVG(total_amount), 2) AS avg_revenue_per_transaction
FROM sales_data
GROUP BY product_category
ORDER BY avg_revenue_per_transaction DESC;


Query 9: mom_growth_percent
WITH monthly_sales AS (
    SELECT 
        strftime('%Y-%m', date) AS month,
        product_category,
        SUM(total_amount) AS total_sales
    FROM sales_data
    GROUP BY month, product_category
),
sales_with_mom AS (
    SELECT 
        month,
        product_category,
        total_sales,
        CASE 
            WHEN LAG(total_sales) OVER (PARTITION BY product_category ORDER BY month) IS NOT NULL THEN
                ROUND(
                    (total_sales - LAG(total_sales) OVER (PARTITION BY product_category ORDER BY month)) * 100.0 /
                    LAG(total_sales) OVER (PARTITION BY product_category ORDER BY month), 2
                )
            ELSE NULL
        END AS mom_growth_percent
    FROM monthly_sales
)
SELECT * 
FROM sales_with_mom
ORDER BY month, product_category;


Query 10: sales contribution percentage by product category
SELECT 
    product_category,
    SUM(total_amount) AS total_sales,
    ROUND(SUM(total_amount) * 100.0 / (SELECT SUM(total_amount) FROM sales_data), 2) AS contribution_pct
FROM sales_data
GROUP BY product_category
ORDER BY total_sales DESC;


Query 11: top 3 months for each product category
WITH monthly_sales AS (
    SELECT 
        product_category,
        strftime('%Y-%m', date) AS month,
        SUM(total_amount) AS monthly_sales
    FROM sales_data
    GROUP BY product_category, month
),
ranked_sales AS (
    SELECT 
        *,
        RANK() OVER (PARTITION BY product_category ORDER BY monthly_sales DESC) AS rank
    FROM monthly_sales
)
SELECT 
    product_category,
    month,
    monthly_sales
FROM ranked_sales
WHERE rank <= 3
ORDER BY product_category, rank;






Section 3: Customer demographics
Query 12: total_sales_by_gender
SELECT 
    gender,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY gender;


Query 13: total_sales_by_age
SELECT 
    CASE 
        WHEN age BETWEEN 18 AND 24 THEN '18-24'
        WHEN age BETWEEN 25 AND 34 THEN '25-34'
        WHEN age BETWEEN 35 AND 44 THEN '35-44'
        WHEN age BETWEEN 45 AND 54 THEN '45-54'
        WHEN age BETWEEN 55 AND 64 THEN '55-64'
        WHEN age >= 65 THEN '65+'
        ELSE 'Unknown'
    END AS age_group,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY age_group;


Query 14: Sales by Gender and Age Group
SELECT 
    gender,
    CASE 
        WHEN age BETWEEN 18 AND 24 THEN '18-24'
        WHEN age BETWEEN 25 AND 34 THEN '25-34'
        WHEN age BETWEEN 35 AND 44 THEN '35-44'
        WHEN age BETWEEN 45 AND 54 THEN '45-54'
        WHEN age BETWEEN 55 AND 64 THEN '55-64'
        WHEN age >= 65 THEN '65+'
        ELSE 'Unknown'
    END AS age_group,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY gender, age_group;


Query 15: total sales by gender in each product category
SELECT 
    product_category,
    gender,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY product_category, gender
ORDER BY product_category, gender;


Query 16: total sales by age in each product category
SELECT 
    product_category,
    CASE
        WHEN age BETWEEN 18 AND 24 THEN '18-24'
        WHEN age BETWEEN 25 AND 34 THEN '25-34'
        WHEN age BETWEEN 35 AND 44 THEN '35-44'
        WHEN age BETWEEN 45 AND 54 THEN '45-54'
        WHEN age BETWEEN 55 AND 64 THEN '55-64'
    END AS age_group,
    SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY product_category, age_group
ORDER BY product_category, age_group;


